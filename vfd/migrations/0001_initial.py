# Generated by Django 4.0.6 on 2022-09-13 19:14

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Accessory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('article', models.CharField(max_length=30, unique=True, verbose_name='Артикул')),
                ('name', models.CharField(blank=True, max_length=200, null=True, verbose_name='Наименование')),
            ],
            options={
                'verbose_name': 'Аксессуар',
                'verbose_name_plural': 'Аксессуары',
                'ordering': ('series__brand', 'article'),
            },
        ),
        migrations.CreateModel(
            name='AccessoryType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True, verbose_name='Наименование')),
            ],
            options={
                'verbose_name': 'Тип аксессуара',
                'verbose_name_plural': 'Тип аксессуаров',
            },
        ),
        migrations.CreateModel(
            name='Application',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True, verbose_name='Наименование')),
            ],
            options={
                'verbose_name': 'Применение',
                'verbose_name_plural': 'Применения',
            },
        ),
        migrations.CreateModel(
            name='Brand',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True, verbose_name='Название')),
                ('site', models.CharField(max_length=150, verbose_name='Сайт')),
                ('description', models.TextField(verbose_name='Описание')),
                ('logo', models.ImageField(upload_to='logos/', verbose_name='Логотип')),
            ],
            options={
                'verbose_name': 'Бренд',
                'verbose_name_plural': 'Бренды',
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True, verbose_name='Наименование')),
            ],
            options={
                'verbose_name': 'Категория',
                'verbose_name_plural': 'Категории',
            },
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True, verbose_name='Название')),
            ],
            options={
                'verbose_name': 'Страна',
                'verbose_name_plural': 'Страны',
            },
        ),
        migrations.CreateModel(
            name='EquipmentLine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True, verbose_name='Название')),
            ],
            options={
                'verbose_name': 'Линейка оборудования',
                'verbose_name_plural': 'Линейки оборудования',
            },
        ),
        migrations.CreateModel(
            name='FrequencyDrive',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('article', models.CharField(max_length=30, unique=True, verbose_name='Артикул')),
                ('name', models.CharField(blank=True, max_length=200, null=True, verbose_name='Наименование')),
                ('power', models.FloatField(choices=[(2.2, '2.2'), (7.5, '7.5'), (22, 22), (45, 45), (110, 110), (250, 250)], verbose_name='Мощность')),
                ('current', models.FloatField(verbose_name='Ток')),
                ('voltage', models.FloatField(choices=[(400, 400), (230, 230)], default=380, verbose_name='Напряжение')),
            ],
            options={
                'verbose_name': 'Частотник',
                'verbose_name_plural': 'Частотники',
                'ordering': ('series__brand', 'series__name', 'voltage', 'power'),
            },
        ),
        migrations.CreateModel(
            name='Supplier',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True, verbose_name='Наименование')),
                ('site', models.CharField(max_length=150, verbose_name='Сайт')),
                ('currency', models.CharField(choices=[('BYN', 'BYN'), ('RUB', 'RUB'), ('EUR', 'EUR'), ('USD', 'USD')], max_length=200, verbose_name='Валюта')),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='vfd.country', verbose_name='Страна')),
            ],
            options={
                'verbose_name': 'Поставщик',
                'verbose_name_plural': 'Поставщики',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Series',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True, verbose_name='Название')),
                ('power_range', models.PositiveSmallIntegerField(blank=True, choices=[(1, '1x220В: 0.2...2.2кВт; 3x380В: 0.4...22кВт'), (2, '0.75...500кВт')], null=True, verbose_name='Диапазон мощностей')),
                ('overload_capacity', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Лёгкий режим: 120% 60с; Нормальный режим: 120% 60с, 160% 3с'), (2, 'Нормальный режим: 120% 60с, 150% 3с; Тяжелый режим: 150% 60с, 200% 3с')], null=True, verbose_name='Перегрузочная способность')),
                ('control_methods', models.PositiveSmallIntegerField(blank=True, choices=[(2, 'V/F (скалярное управление), SVC (бездатчиковое векторное управление)')], null=True, verbose_name='Методы управления')),
                ('starting_torque', models.TextField(blank=True, null=True, verbose_name='Пусковой момент')),
                ('setting_vf_characteristic', models.CharField(blank=True, max_length=200, null=True, verbose_name='Задание характеристики V/F')),
                ('speed_control_range', models.FloatField(blank=True, null=True, verbose_name='Диапазон регулирования скорости, Гц')),
                ('torque_limitation', models.CharField(blank=True, max_length=200, null=True, verbose_name='Ограничение момента')),
                ('torque_accuracy', models.CharField(blank=True, max_length=20, null=True, verbose_name='Точность по моменту')),
                ('maximum_output_frequency', models.CharField(blank=True, max_length=200, null=True, verbose_name='Максимальная выходная частот, Гц')),
                ('output_frequency_accuracy', models.CharField(blank=True, max_length=200, null=True, verbose_name='Точность выходной частоты')),
                ('acceleration_deceleration_time', models.CharField(blank=True, max_length=200, null=True, verbose_name='Время разгона/торможения')),
                ('main_control_functions', models.TextField(blank=True, null=True, verbose_name='Основные функции управления')),
                ('control_built_in_fan', models.CharField(blank=True, max_length=200, null=True, verbose_name='Управление встроенным вентилятором охлаждения')),
                ('engine_protection', models.CharField(blank=True, max_length=200, null=True, verbose_name='Защита двигателя')),
                ('overcurrent_protection', models.TextField(blank=True, null=True, verbose_name='Защита от перегрузки по току')),
                ('overvoltage_protection', models.CharField(blank=True, max_length=200, null=True, verbose_name='Защита по превышению напряжения')),
                ('temperature_protection', models.CharField(blank=True, max_length=200, null=True, verbose_name='Защита по температуре')),
                ('stop_prevention', models.CharField(blank=True, max_length=200, null=True, verbose_name='Предотвращение зависания')),
                ('automatic_start_after_power_loss', models.CharField(blank=True, max_length=200, null=True, verbose_name='Автоматический запуск после пропадания питания')),
                ('power_outages', models.BooleanField(blank=True, null=True, verbose_name='Преодоление провалов напряжения')),
                ('current_leakage_protection', models.CharField(blank=True, max_length=200, null=True, verbose_name='Защита от утечек тока на землю')),
                ('digital_inputs', models.PositiveSmallIntegerField(verbose_name='Дискретные входы')),
                ('analog_inputs', models.PositiveSmallIntegerField(verbose_name='Аналоговые входы')),
                ('transistor_outputs', models.PositiveSmallIntegerField(verbose_name='Транзисторные выходы')),
                ('relay_outputs', models.PositiveSmallIntegerField(verbose_name='Релейные выходы')),
                ('analog_outputs', models.PositiveSmallIntegerField(verbose_name='Аналоговые выходы')),
                ('pulse_frequency_setting', models.BooleanField(null=True, verbose_name='Импульсное задание частоты')),
                ('control_panel', models.TextField(blank=True, null=True, verbose_name='Панель управления')),
                ('control_panel_included', models.BooleanField(blank=True, null=True, verbose_name='Панель управления в комплекте')),
                ('control_panel_at_distance', models.CharField(blank=True, max_length=200, null=True, verbose_name='Возможность выносного крепления панели')),
                ('built_in_communication', models.CharField(blank=True, choices=[('No', 'Нет'), ('ModBusRTU', 'Modbus RTU'), ('ModBusRTU/BACnet', 'Modbus RTU, BACnet')], max_length=200, null=True, verbose_name='Встроенный протокол связи')),
                ('additional_communications', models.CharField(blank=True, max_length=200, null=True, verbose_name='Дополнительные протоколы связи')),
                ('emc_filter', models.PositiveSmallIntegerField(blank=True, choices=[(0, 'Нет'), (1, 'C3'), (2, 'C2')], null=True, verbose_name='Встроенный EMC фильтр')),
                ('choke_dc_link', models.CharField(blank=True, max_length=300, null=True, verbose_name='Дроссель в звене постоянного тока')),
                ('brake_interrupter', models.CharField(blank=True, max_length=300, null=True, verbose_name='Тормозной прерыватель')),
                ('built_in_plc', models.PositiveSmallIntegerField(blank=True, choices=[(0, 'Нет'), (2, 'ПЛК на 2000 шагов'), (3, 'ПЛК на 10000 шагов')], null=True, verbose_name='Встроенный ПЛК')),
                ('installation_place', models.CharField(blank=True, max_length=200, null=True, verbose_name='Место установки')),
                ('operating_temp', models.PositiveSmallIntegerField(blank=True, choices=[(1, '-10...+40(+50); -10...+60 со снижением характеристик'), (2, '-20...+50; -20...+60 со снижением характеристик')], null=True, verbose_name='Рабочая температура, ℃')),
                ('use_relative_humidity', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Макс. 90%'), (2, 'Макс. 95%')], null=True, verbose_name='Относительная влажность при эксплуатации')),
                ('atmospheric_pressure_use', models.PositiveSmallIntegerField(blank=True, choices=[(1, '86...106')], null=True, verbose_name='Атмосферное давление при эксплуатации, кПа')),
                ('installation_altitude', models.PositiveSmallIntegerField(blank=True, choices=[(1, '<1000м; >1000м со снижением характеристик')], null=True, verbose_name='Высота установки')),
                ('vibration', models.TextField(blank=True, null=True, verbose_name='Вибрация')),
                ('wall_to_wall_installation', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Допускается для типоразмеров D0 и выше; типоразмеры A-C: зазор 10мм'), (2, 'Допускается при макс.окруж.темп. до -40℃, до -50℃ со снижением характеристик')], null=True, verbose_name='Монтаж "Стенка к стенке"')),
                ('different_engines_work', models.CharField(blank=True, max_length=200, null=True, verbose_name='Работа с разными двигателями')),
                ('protection_degree', models.CharField(blank=True, choices=[('IP20', 'IP20'), ('IP21', 'IP21'), ('IP55', 'IP55')], max_length=200, null=True, verbose_name='Степень защиты')),
                ('motor_cable_length', models.TextField(blank=True, null=True, verbose_name='Максимальная длина кабеля двигателя')),
                ('encoder_support', models.BooleanField(blank=True, null=True, verbose_name='Подключение энкодера')),
                ('pre_configurations', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Группировка параметров по применениям')], null=True, verbose_name='Предварительные конфигурации (Макросы)')),
                ('copy_backup_settings', models.BooleanField(blank=True, null=True, verbose_name='Возможность копирования/бэкапа настроек')),
                ('engine_cascade_control', models.CharField(blank=True, max_length=200, null=True, verbose_name='Управление каскадом двигателей')),
                ('multi_pump_system', models.CharField(blank=True, max_length=200, null=True, verbose_name='Система Multi-pump (группа приводов-насосов подключенных по шине)')),
                ('pid_controller', models.IntegerField(blank=True, null=True, verbose_name='Встроенный ПИД-регулятор')),
                ('fire_mode', models.BooleanField(blank=True, null=True, verbose_name='Пожарный режим')),
                ('circuit_boards_protection', models.PositiveSmallIntegerField(blank=True, choices=[(0, 'Нет'), (1, 'Специальное покрытие печатных плат')], null=True, verbose_name='Защита печатных плат')),
                ('sleep_mode', models.BooleanField(blank=True, null=True, verbose_name='Спящий режим')),
                ('flying_start', models.BooleanField(blank=True, null=True, verbose_name='Подхват на ходу')),
                ('skip_frequency', models.BooleanField(blank=True, null=True, verbose_name='Пропуск критических частот')),
                ('realtime_clock', models.BooleanField(blank=True, null=True, verbose_name='Часы реального времени')),
                ('quick_change_fans', models.BooleanField(blank=True, null=True, verbose_name='Быстросъёмные вентиляторы')),
                ('automatic_energy_saving', models.BooleanField(blank=True, null=True, verbose_name='Автоматическое энергосбережение')),
                ('io_expansion_boards', models.BooleanField(blank=True, null=True, verbose_name='Платы расширения входов-выходов')),
                ('removable_terminal_blocks', models.BooleanField(blank=True, null=True, verbose_name='Съёмные клеммные колодки')),
                ('dual_circuit_cooling', models.BooleanField(blank=True, null=True, verbose_name='Двухконтурное охлаждение')),
                ('sto_function', models.BooleanField(blank=True, null=True, verbose_name='Функция STO (безопасного отключения момента)')),
                ('external_power_24v', models.CharField(blank=True, max_length=200, null=True, verbose_name='Подключение внешнего питания +24В')),
                ('built_in_usb', models.PositiveSmallIntegerField(blank=True, choices=[(0, 'Нет'), (1, 'Есть (загрузка и выгрузка даже без включения питания)')], null=True, verbose_name='Встроенный порт USB')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Описание')),
                ('image', models.ImageField(blank=True, null=True, upload_to='images/', verbose_name='Картинка')),
                ('applications', models.ManyToManyField(to='vfd.application', verbose_name='Применения')),
                ('brand', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='vfd.brand', verbose_name='Бренд')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='vfd.category', verbose_name='Категория')),
            ],
            options={
                'verbose_name': 'Серия',
                'verbose_name_plural': 'Серии',
                'ordering': ('brand', 'name'),
            },
        ),
        migrations.CreateModel(
            name='Price',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.FloatField(verbose_name='Цена')),
                ('accessory', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='vfd.accessory', verbose_name='Аксессуар')),
                ('frequency_drive', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='vfd.frequencydrive', verbose_name='Частотник')),
                ('supplier', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='vfd.supplier', verbose_name='Поставщик')),
            ],
            options={
                'verbose_name': 'Цена',
                'verbose_name_plural': 'Цены',
            },
        ),
        migrations.AddField(
            model_name='frequencydrive',
            name='series',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='vfd.series', verbose_name='Серия'),
        ),
        migrations.AddField(
            model_name='brand',
            name='country',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='vfd.country', verbose_name='Страна'),
        ),
        migrations.AddField(
            model_name='brand',
            name='equipment_lines',
            field=models.ManyToManyField(to='vfd.equipmentline', verbose_name='Линейки оборудования'),
        ),
        migrations.AddField(
            model_name='brand',
            name='suppliers',
            field=models.ManyToManyField(to='vfd.supplier', verbose_name='Поставщики'),
        ),
        migrations.AddField(
            model_name='accessory',
            name='series',
            field=models.ManyToManyField(to='vfd.series', verbose_name='Серии'),
        ),
        migrations.AddField(
            model_name='accessory',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='vfd.accessorytype', verbose_name='Тип аксессуара'),
        ),
    ]
