# Generated by Django 4.0.6 on 2022-10-06 09:48

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('vfd', '0176_series_package_set'),
    ]

    operations = [
        migrations.AddField(
            model_name='series',
            name='minimum_size',
            field=models.PositiveSmallIntegerField(blank=True, choices=[(30, '202x70x161'), (40, '170x78x134')], null=True, verbose_name='Минимальный габарит, ВхШхГ'),
        ),
        migrations.AlterField(
            model_name='series',
            name='carrier_frequency',
            field=models.PositiveSmallIntegerField(blank=True, choices=[(20, '2...12 (Default: 3)'), (21, '2...15'), (22, '2...15 (Default: 4)'), (23, '2...16 (Default: 4/3)'), (24, '1...16/10/5 (Default: 6/4.5/3/1.8)'), (25, '0.5...16'), (26, '4...16 (Default: 4)'), (30, '2...15/10/9 (Default: 8/6/4)'), (31, '1...14 (Default: 8)'), (32, '1...15 (Default: 8/4/2)')], null=True, verbose_name='Несущая частота ШИМ, кГц'),
        ),
        migrations.AlterField(
            model_name='series',
            name='communications',
            field=models.PositiveSmallIntegerField(blank=True, choices=[(0, 'Нет'), (10, 'Плата расширения: Modbus RTU'), (20, 'Платы расширения: Modbus RTU, Profibus DP'), (30, 'Встроен: Modbus RTU'), (40, 'Встроен: Modbus RTU; Платы расширения: Profibus DP'), (41, 'Платы расширения: Modbus RTU, Ethernet, Profibus DP, ProfiNet IO, DeviceNet, CANopen, EtherCAT'), (50, 'Встроен: Modbus RTU; Платы расширения: Ethernet, Profibus DP'), (60, 'Встроен: Modbus RTU; Платы расширения: Profibus DP, CANopen, CANlink'), (70, 'Встроен: Modbus RTU; Платы расширения: Ethernet, DeviceNet, CANopen, Profibus DP'), (80, 'Встроены: Modbus RTU, BACnet; Платы расширения: Ethernet, DeviceNet, CANopen, Profibus DP')], null=True, verbose_name='Протоколы связи'),
        ),
        migrations.AlterField(
            model_name='series',
            name='control_panel',
            field=models.PositiveSmallIntegerField(blank=True, choices=[(10, 'LED 4x7'), (20, 'LED 5x7'), (30, 'LED двухстрочный'), (31, 'LED 5x7 (LCD опционально)'), (32, 'LED двухстрочный (LCD опционально)'), (33, 'LCD базовая (LCD интеллектуальная опционально)'), (40, 'LCD дисплей')], null=True, verbose_name='Панель управления'),
        ),
        migrations.AlterField(
            model_name='series',
            name='overload_capacity',
            field=models.PositiveSmallIntegerField(blank=True, choices=[(10, 'Лёгкий режим: 120% 60с; \nНормальный режим: 120% 60с, 160% 3с'), (20, '150% 60с; 180% 3с'), (21, 'G type: 150% 60с, 180% 3с; \nP type: 120% 60с, 150% 3с'), (22, '150% 60с; 180% 2с; 200% 0.5c'), (23, 'G type: 150% 60с; 180% 3с'), (24, '150% 60с каждые 10 мин; 180% 2с'), (30, '110% длит.; 150% 60с; 180% 5с'), (31, 'Нормальный режим: 120% 60с, 150% 3с; \nТяжелый режим: 150% 60с, 200% 3с'), (32, 'G type: 110% длит.; 150% 60с, 200% 4с; \nP type: 105% длит.; 120% 60с, 150% 1с'), (33, '150% 60с; 180% 10с; 200% 1c'), (34, 'G type: 150% 60с; 180% 10с; 200% 1c; \nP type: 120% 60с')], null=True, verbose_name='Перегрузочная способность'),
        ),
        migrations.AlterField(
            model_name='series',
            name='package_set',
            field=models.PositiveSmallIntegerField(blank=True, choices=[(0, 'Нет'), (10, 'Плотный картон, вспененный полиэтилен, сокращённый мануал'), (11, 'Плотный картон, вспененный полиэтилен, полный мануал'), (30, 'Плотный картон, надувная пузырчатая пленка, сокращённый мануал'), (31, 'Плотный картон, надувная пузырчатая пленка, полный мануал')], null=True, verbose_name='Комплект поставки, упаковка'),
        ),
    ]
